{
  "tasks": [
    {
      "number": "1.0",
      "name": "Phase 1: Foundation Setup",
      "description": "Establish project foundation with TypeScript configuration, dependency management, directory structure, and core type definitions for the multi-platform forum scraper",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": [],
      "files": ["package.json", "tsconfig.json", "src/", ".gitignore"],
      "docs_references": ["https://www.typescriptlang.org/docs/", "https://docs.npmjs.com/"],
      "testing_strategy": "Unit tests for core types and configuration validation",
      "notes": "Critical foundation phase that enables all subsequent development"
    },
    {
      "number": "1.1",
      "name": "Initialize TypeScript Project Structure",
      "description": "Set up TypeScript project with proper tsconfig.json, package.json with all required dependencies, and initial directory structure following the comprehensive plan architecture",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": [],
      "files": ["package.json", "tsconfig.json", "src/index.ts", "src/types/", "src/utils/"],
      "docs_references": ["https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"],
      "testing_strategy": "Validate TypeScript compilation and module resolution",
      "notes": "Use strict TypeScript configuration with modern ES target and proper module system"
    },
    {
      "number": "1.2",
      "name": "Install Core Dependencies",
      "description": "Install all required dependencies: better-sqlite3, commander, zod, winston, chalk, p-queue, p-retry, node-fetch, lru-cache, csv-writer, dotenv, ora, inquirer",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.1"],
      "files": ["package.json", "package-lock.json"],
      "docs_references": ["https://docs.npmjs.com/cli/v9/commands/npm-install"],
      "testing_strategy": "Verify all dependencies install correctly and have no conflicts",
      "notes": "Focus on production dependencies first, dev dependencies can be added in testing phase"
    },
    {
      "number": "1.3",
      "name": "Create Base Type Definitions",
      "description": "Define core TypeScript interfaces including ForumPost, ScraperConfig, PlatformConfig, RateLimitConfig, and other foundational types that will be used across all platforms",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.2"],
      "files": ["src/types/core.ts", "src/types/config.ts", "src/types/platform.ts"],
      "docs_references": ["https://www.typescriptlang.org/docs/handbook/interfaces.html"],
      "testing_strategy": "Unit tests to validate type constraints and schema validation",
      "notes": "Use Zod schemas for runtime validation alongside TypeScript interfaces"
    },
    {
      "number": "1.4",
      "name": "Setup Project Directory Structure",
      "description": "Create complete directory structure as defined in the plan: platforms/, database/, export/, session/, config/, cli/, utils/ with proper index files",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.3"],
      "files": ["src/platforms/", "src/database/", "src/export/", "src/session/", "src/config/", "src/cli/"],
      "docs_references": [],
      "testing_strategy": "Verify directory structure matches plan and all index files export correctly",
      "notes": "Each directory should have an index.ts file for clean imports"
    },
    {
      "number": "2.0",
      "name": "Phase 2: Database and Configuration",
      "description": "Implement SQLite database schema with multi-platform support, database operations layer, and comprehensive configuration management system",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.0"],
      "files": ["src/database/", "src/config/", ".fscraperс"],
      "docs_references": ["https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md"],
      "testing_strategy": "Database operations testing with in-memory SQLite, configuration validation tests",
      "notes": "Database must support multi-platform data with proper indexing for performance"
    },
    {
      "number": "2.1",
      "name": "Design Multi-Platform Database Schema",
      "description": "Create comprehensive SQLite schema with forum_posts table supporting all platforms, scraping_sessions for resume capability, scraping_metrics for monitoring, and proper indexes",
      "parent": "2.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.0"],
      "files": ["src/database/schema.sql", "src/database/migrations.ts"],
      "docs_references": ["https://sqlite.org/lang.html", "https://sqlite.org/optoverview.html"],
      "testing_strategy": "Test schema creation, constraints, and index performance with sample data",
      "notes": "Include generated columns for analytics and proper unique constraints for platform_id"
    },
    {
      "number": "2.2",
      "name": "Implement Database Operations Layer",
      "description": "Create database.ts with CRUD operations, upsert functionality for posts, session management, and analytics queries using better-sqlite3 with proper error handling",
      "parent": "2.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.1"],
      "files": ["src/database/database.ts", "src/database/queries.ts", "src/database/analytics.ts"],
      "docs_references": ["https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md"],
      "testing_strategy": "Unit tests for all database operations, transaction handling, and concurrent access",
      "notes": "Use prepared statements for performance and prevent SQL injection"
    },
    {
      "number": "2.3",
      "name": "Create Configuration Management System",
      "description": "Implement configuration loader with discovery chain (CLI flags → local config → parent dirs → global → defaults), validation with Zod schemas, and environment variable support",
      "parent": "2.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.2"],
      "files": ["src/config/config-loader.ts", "src/config/config-validator.ts", "src/config/default-config.ts"],
      "docs_references": ["https://zod.dev/"],
      "testing_strategy": "Test configuration discovery chain, validation, and merging logic",
      "notes": "Support both .fscraperс JSON files and environment variables with proper precedence"
    },
    {
      "number": "2.4",
      "name": "Implement Database Migration System",
      "description": "Create database migration system to handle schema updates, version tracking, and backward compatibility for future database schema changes",
      "parent": "2.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["2.2"],
      "files": ["src/database/migrations.ts", "src/database/version-manager.ts"],
      "docs_references": [],
      "testing_strategy": "Test migration up/down operations and version tracking",
      "notes": "Store schema version in database and support incremental migrations"
    },
    {
      "number": "3.0",
      "name": "Phase 3: CLI Framework and Platform Factory",
      "description": "Build comprehensive CLI interface using Commander.js, implement platform factory pattern for extensibility, and establish logging infrastructure",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.0"],
      "files": ["src/cli/", "src/platform-factory.ts", "src/utils/logger.ts"],
      "docs_references": ["https://github.com/tj/commander.js", "https://github.com/winstonjs/winston"],
      "testing_strategy": "CLI argument parsing tests, platform factory registration tests, logging output validation",
      "notes": "CLI should be user-friendly with proper help text and validation"
    },
    {
      "number": "3.1",
      "name": "Build CLI Interface with Commander.js",
      "description": "Create comprehensive CLI using Commander.js with all specified options: platform selection, source, time periods, sorting, limits, performance settings, export options, and advanced features",
      "parent": "3.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.0"],
      "files": ["src/cli/cli.ts", "src/cli/commands/", "src/cli/validators/"],
      "docs_references": ["https://github.com/tj/commander.js#readme"],
      "testing_strategy": "Test all CLI options, validation, and error messages",
      "notes": "Include comprehensive help text and input validation for all parameters"
    },
    {
      "number": "3.2",
      "name": "Implement Platform Factory System",
      "description": "Create platform factory for registering and instantiating platform scrapers, enabling clean extension architecture and platform selection logic",
      "parent": "3.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["3.1"],
      "files": ["src/platform-factory.ts", "src/platforms/registry.ts"],
      "docs_references": ["https://refactoring.guru/design-patterns/factory-method"],
      "testing_strategy": "Test platform registration, instantiation, and selection logic",
      "notes": "Support dynamic platform registration and validation of platform implementations"
    },
    {
      "number": "3.3",
      "name": "Setup Winston Logging Infrastructure",
      "description": "Configure Winston logging with multiple levels, file rotation, console output, and structured logging for debugging, monitoring, and audit trails",
      "parent": "3.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["3.2"],
      "files": ["src/utils/logger.ts", "src/utils/log-formatters.ts"],
      "docs_references": ["https://github.com/winstonjs/winston#readme"],
      "testing_strategy": "Test logging levels, file output, and log rotation",
      "notes": "Include timestamp, level, and structured data in log entries"
    },
    {
      "number": "3.4",
      "name": "Create Error Handling and Custom Exceptions",
      "description": "Define custom error classes for platform-specific errors, API errors, configuration errors, and database errors with proper error messages and context",
      "parent": "3.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["3.3"],
      "files": ["src/utils/errors.ts", "src/utils/error-handler.ts"],
      "docs_references": [],
      "testing_strategy": "Test error inheritance, message formatting, and error context",
      "notes": "Include error codes and context for better debugging and user experience"
    },
    {
      "number": "4.0",
      "name": "Phase 4: Reddit Scraper Implementation",
      "description": "Implement complete Reddit scraper using JSON API endpoints with rate limiting, data mapping, pagination support, and comprehensive error handling",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["3.0"],
      "files": ["src/platforms/reddit/", "src/platforms/base/"],
      "docs_references": ["https://www.reddit.com/dev/api/", "https://github.com/reddit-archive/reddit/wiki/JSON"],
      "testing_strategy": "Unit tests for API client, data mapping, and scraper logic with mocked responses",
      "notes": "Use Reddit JSON API endpoints directly without authentication for public data"
    },
    {
      "number": "4.1",
      "name": "Create Abstract Platform Scraper Base Class",
      "description": "Implement abstract PlatformScraper base class with core methods (buildApiUrl, parseResponse, getNextPageToken, getRateLimit, mapToForumPost) and shared functionality",
      "parent": "4.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["3.0"],
      "files": ["src/platforms/base/platform-scraper.ts", "src/platforms/base/types.ts"],
      "docs_references": ["https://www.typescriptlang.org/docs/handbook/classes.html#abstract-classes"],
      "testing_strategy": "Test abstract class contract and shared functionality",
      "notes": "Include retry logic, caching, and rate limiting in base class"
    },
    {
      "number": "4.2",
      "name": "Implement Advanced Rate Limiter",
      "description": "Create sophisticated rate limiting system with request queues, exponential backoff, response caching, adaptive rate limiting, and platform-specific limits",
      "parent": "4.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.1"],
      "files": ["src/platforms/base/rate-limiter.ts", "src/platforms/base/cache.ts"],
      "docs_references": ["https://github.com/sindresorhus/p-queue", "https://github.com/sindresorhus/p-retry"],
      "testing_strategy": "Test rate limiting behavior, cache functionality, and backoff logic",
      "notes": "Use p-queue for request queuing and LRU cache for response caching"
    },
    {
      "number": "4.3",
      "name": "Build Reddit API Client",
      "description": "Create Reddit-specific API client that constructs proper URLs for different endpoints (.json suffix), handles subreddit queries, sorting options, and time periods",
      "parent": "4.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.2"],
      "files": ["src/platforms/reddit/reddit-api.ts", "src/platforms/reddit/reddit-types.ts"],
      "docs_references": ["https://www.reddit.com/dev/api/", "https://github.com/reddit-archive/reddit/wiki/JSON"],
      "testing_strategy": "Test URL construction, parameter handling, and API response parsing",
      "notes": "Support all Reddit sorting options (hot, new, top, rising, controversial) and time periods"
    },
    {
      "number": "4.4",
      "name": "Implement Reddit Data Mapper",
      "description": "Create mapper to transform Reddit API response format to standardized ForumPost interface, handling all Reddit-specific fields and edge cases",
      "parent": "4.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.3"],
      "files": ["src/platforms/reddit/reddit-mapper.ts", "src/platforms/reddit/reddit-validator.ts"],
      "docs_references": ["https://zod.dev/"],
      "testing_strategy": "Test mapping accuracy, edge case handling, and data validation",
      "notes": "Handle deleted/removed posts, self-posts vs link posts, and all Reddit metadata"
    },
    {
      "number": "4.5",
      "name": "Complete Reddit Scraper Implementation",
      "description": "Integrate all Reddit components into complete RedditScraper class extending PlatformScraper, with pagination support and error handling",
      "parent": "4.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.4"],
      "files": ["src/platforms/reddit/reddit-scraper.ts"],
      "docs_references": [],
      "testing_strategy": "Integration tests with real API calls and comprehensive error scenarios",
      "notes": "Support pagination through Reddit's after/before parameters"
    },
    {
      "number": "5.0",
      "name": "Phase 5: Hacker News Scraper Implementation",
      "description": "Implement Hacker News scraper using Firebase API with two-phase approach (IDs then details), supporting all HN categories and proper data mapping",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.0"],
      "files": ["src/platforms/hackernews/"],
      "docs_references": ["https://github.com/HackerNews/API"],
      "testing_strategy": "Unit and integration tests for HN API client and two-phase scraping logic",
      "notes": "HN requires two API calls: first for story IDs, then individual story details"
    },
    {
      "number": "5.1",
      "name": "Implement Hacker News API Client",
      "description": "Create HN API client using Firebase endpoints for topstories, newstories, beststories, askstories, showstories, and jobstories with individual item fetching",
      "parent": "5.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.0"],
      "files": ["src/platforms/hackernews/hn-api.ts", "src/platforms/hackernews/hn-types.ts"],
      "docs_references": ["https://github.com/HackerNews/API"],
      "testing_strategy": "Test all HN endpoints and individual item fetching",
      "notes": "Handle HN's Firebase API structure and batch processing for efficiency"
    },
    {
      "number": "5.2",
      "name": "Create HN Data Mapper",
      "description": "Implement mapper to transform HN API response to ForumPost interface, handling HN-specific fields like descendants, kids array, and different item types",
      "parent": "5.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["5.1"],
      "files": ["src/platforms/hackernews/hn-mapper.ts"],
      "docs_references": [],
      "testing_strategy": "Test mapping for all HN item types (story, comment, job, poll)",
      "notes": "Handle missing fields gracefully and map HN score/descendants to ForumPost schema"
    },
    {
      "number": "5.3",
      "name": "Complete HN Scraper Implementation",
      "description": "Build complete HackerNewsScraper class with two-phase scraping (IDs then details), batch processing, and integration with base platform architecture",
      "parent": "5.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["5.2"],
      "files": ["src/platforms/hackernews/hn-scraper.ts"],
      "docs_references": [],
      "testing_strategy": "End-to-end tests for complete HN scraping workflow",
      "notes": "Optimize batch processing for fetching individual story details efficiently"
    },
    {
      "number": "5.4",
      "name": "Integrate Multi-Platform Support",
      "description": "Register both Reddit and HN scrapers with platform factory, implement platform detection logic, and ensure consistent behavior across platforms",
      "parent": "5.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["5.3"],
      "files": ["src/platform-factory.ts", "src/platforms/index.ts"],
      "docs_references": [],
      "testing_strategy": "Test platform switching and consistent data output across platforms",
      "notes": "Ensure both platforms produce compatible ForumPost data structures"
    },
    {
      "number": "6.0",
      "name": "Phase 6: Data Export and Reporting",
      "description": "Implement comprehensive data export system supporting CSV and JSON formats, analytics queries, and automated reporting capabilities",
      "parent": null,
      "status": "pending",
      "priority": 2,
      "dependencies": ["5.0"],
      "files": ["src/export/", "src/database/analytics.ts"],
      "docs_references": ["https://github.com/ryu1kn/csv-writer"],
      "testing_strategy": "Test export format accuracy, analytics query performance, and large dataset handling",
      "notes": "Support custom export formats and analytics dashboards"
    },
    {
      "number": "6.1",
      "name": "Create Export System Architecture",
      "description": "Build flexible export system with ExportManager coordinating format-specific exporters, supporting streaming for large datasets and customizable field selection",
      "parent": "6.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["5.0"],
      "files": ["src/export/exporter.ts", "src/export/formats.ts"],
      "docs_references": [],
      "testing_strategy": "Test export coordination and streaming functionality",
      "notes": "Design for extensibility to add new export formats easily"
    },
    {
      "number": "6.2",
      "name": "Implement CSV Export Functionality",
      "description": "Create CSV exporter with proper escaping, custom delimiters, header customization, and support for nested JSON fields flattening",
      "parent": "6.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["6.1"],
      "files": ["src/export/csv-exporter.ts"],
      "docs_references": ["https://github.com/ryu1kn/csv-writer#readme"],
      "testing_strategy": "Test CSV generation with various data types and special characters",
      "notes": "Handle Unicode characters and large text fields properly"
    },
    {
      "number": "6.3",
      "name": "Implement JSON Export Functionality",
      "description": "Create JSON exporter with pretty printing, streaming for large datasets, and optional compression support",
      "parent": "6.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["6.1"],
      "files": ["src/export/json-exporter.ts"],
      "docs_references": [],
      "testing_strategy": "Test JSON generation, streaming, and memory efficiency",
      "notes": "Support both compact and pretty-printed JSON output"
    },
    {
      "number": "6.4",
      "name": "Build Analytics and Reporting System",
      "description": "Implement analytics queries for trending analysis, author statistics, time-based patterns, and generate summary reports with key insights",
      "parent": "6.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["6.3"],
      "files": ["src/database/analytics.ts", "src/export/report-generator.ts"],
      "docs_references": ["https://sqlite.org/lang_aggfunc.html"],
      "testing_strategy": "Test analytics query performance and report accuracy",
      "notes": "Use SQLite's analytical functions for efficient data aggregation"
    },
    {
      "number": "7.0",
      "name": "Phase 7: Testing and Quality Assurance",
      "description": "Comprehensive testing suite including unit tests, integration tests, end-to-end testing, and quality assurance measures",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.0"],
      "files": ["tests/", "vitest.config.ts", ".github/workflows/"],
      "docs_references": ["https://vitest.dev/", "https://mswjs.io/"],
      "testing_strategy": "Achieve >90% code coverage with comprehensive test scenarios",
      "notes": "Include mock API responses and database testing with in-memory SQLite"
    },
    {
      "number": "7.1",
      "name": "Setup Testing Infrastructure",
      "description": "Configure Vitest testing framework, setup test fixtures, create mock API server using MSW, and establish testing utilities and helpers",
      "parent": "7.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.0"],
      "files": ["vitest.config.ts", "tests/fixtures/", "tests/helpers/test-setup.ts", "tests/helpers/mock-api-server.ts"],
      "docs_references": ["https://vitest.dev/config/", "https://mswjs.io/docs/"],
      "testing_strategy": "Setup comprehensive testing environment with mocked external dependencies",
      "notes": "Include fixtures for Reddit and HN API responses"
    },
    {
      "number": "7.2",
      "name": "Write Unit Tests",
      "description": "Create comprehensive unit tests for all modules: platform scrapers, database operations, configuration management, export functionality, and utility functions",
      "parent": "7.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["7.1"],
      "files": ["tests/unit/", "tests/unit/platforms/", "tests/unit/database/", "tests/unit/export/"],
      "docs_references": ["https://vitest.dev/api/"],
      "testing_strategy": "Test individual functions and classes in isolation with mocked dependencies",
      "notes": "Focus on edge cases, error conditions, and boundary value testing"
    },
    {
      "number": "7.3",
      "name": "Develop Integration Tests",
      "description": "Build integration tests for API interactions, database operations, end-to-end scraping workflows, and cross-module functionality",
      "parent": "7.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["7.2"],
      "files": ["tests/integration/", "tests/integration/reddit-api.test.ts", "tests/integration/hn-api.test.ts"],
      "docs_references": [],
      "testing_strategy": "Test component interactions and data flow through the system",
      "notes": "Use mock servers to simulate real API responses and test error scenarios"
    },
    {
      "number": "7.4",
      "name": "Create End-to-End Tests",
      "description": "Implement complete workflow testing from CLI input to data export, including session management, error recovery, and multi-platform scenarios",
      "parent": "7.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["7.3"],
      "files": ["tests/e2e/", "tests/e2e/complete-workflow.test.ts"],
      "docs_references": [],
      "testing_strategy": "Test complete user workflows with realistic data scenarios",
      "notes": "Include testing of CLI interface and export functionality"
    },
    {
      "number": "7.5",
      "name": "Quality Assurance and Code Coverage",
      "description": "Ensure >90% code coverage, run linting and type checking, performance profiling, and establish CI/CD pipeline for automated testing",
      "parent": "7.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["7.4"],
      "files": ["package.json", ".github/workflows/ci.yml", "eslint.config.js"],
      "docs_references": ["https://eslint.org/", "https://www.typescriptlang.org/"],
      "testing_strategy": "Automated quality checks and performance benchmarking",
      "notes": "Setup GitHub Actions for automated testing and quality checks"
    },
    {
      "number": "8.0",
      "name": "Phase 8: Performance Optimization and Monitoring",
      "description": "Optimize performance for large-scale scraping, implement monitoring and metrics collection, and add health checking capabilities",
      "parent": null,
      "status": "pending",
      "priority": 2,
      "dependencies": ["7.0"],
      "files": ["src/monitoring/", "src/performance/", "src/health/"],
      "docs_references": [],
      "testing_strategy": "Performance benchmarks and monitoring system validation",
      "notes": "Focus on memory efficiency and throughput optimization"
    },
    {
      "number": "8.1",
      "name": "Performance Optimization",
      "description": "Optimize database queries, implement connection pooling, add memory management for large datasets, and tune rate limiting for maximum throughput",
      "parent": "8.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["7.0"],
      "files": ["src/database/query-optimizer.ts", "src/performance/memory-manager.ts"],
      "docs_references": ["https://sqlite.org/optoverview.html"],
      "testing_strategy": "Performance benchmarks and memory usage profiling",
      "notes": "Target <100MB memory usage and >1000 posts per minute throughput"
    },
    {
      "number": "8.2",
      "name": "Implement Monitoring System",
      "description": "Create metrics collection for API performance, database operations, cache hit rates, and error tracking with structured logging",
      "parent": "8.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["8.1"],
      "files": ["src/monitoring/metrics-collector.ts", "src/monitoring/performance-monitor.ts"],
      "docs_references": [],
      "testing_strategy": "Test metrics collection accuracy and performance impact",
      "notes": "Store metrics in scraping_metrics table for analysis"
    },
    {
      "number": "8.3",
      "name": "Add Health Checking and Diagnostics",
      "description": "Implement health checks for database connectivity, API availability, configuration validation, and system resource monitoring",
      "parent": "8.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["8.2"],
      "files": ["src/health/health-checker.ts", "src/health/diagnostics.ts"],
      "docs_references": [],
      "testing_strategy": "Test health check reliability and diagnostic accuracy",
      "notes": "Provide actionable diagnostic information for troubleshooting"
    },
    {
      "number": "8.4",
      "name": "Final Integration and Documentation",
      "description": "Complete final integration testing, update all documentation, prepare production deployment guides, and validate all success metrics",
      "parent": "8.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["8.3"],
      "files": ["README.md", "docs/", "DEPLOYMENT.md"],
      "docs_references": [],
      "testing_strategy": "Final comprehensive testing and documentation validation",
      "notes": "Ensure all success metrics are met: performance, reliability, feature completeness"
    }
  ]
}